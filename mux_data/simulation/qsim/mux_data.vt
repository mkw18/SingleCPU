// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/02/2020 17:03:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mux_data
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_data_vlg_sample_tst(
	ALUSrc,
	Imm32,
	RtData,
	sampler_tx
);
input  ALUSrc;
input [31:0] Imm32;
input [31:0] RtData;
output sampler_tx;

reg sample;
time current_time;
always @(ALUSrc or Imm32 or RtData)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mux_data_vlg_check_tst (
	DataB,
	sampler_rx
);
input [31:0] DataB;
input sampler_rx;

reg [31:0] DataB_expected;

reg [31:0] DataB_prev;

reg [31:0] DataB_expected_prev;

reg [31:0] last_DataB_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	DataB_prev = DataB;
end

// update expected /o prevs

always @(trigger)
begin
	DataB_expected_prev = DataB_expected;
end


// expected DataB[ 31 ]
initial
begin
	DataB_expected[31] = 1'bX;
end 
// expected DataB[ 30 ]
initial
begin
	DataB_expected[30] = 1'bX;
end 
// expected DataB[ 29 ]
initial
begin
	DataB_expected[29] = 1'bX;
end 
// expected DataB[ 28 ]
initial
begin
	DataB_expected[28] = 1'bX;
end 
// expected DataB[ 27 ]
initial
begin
	DataB_expected[27] = 1'bX;
end 
// expected DataB[ 26 ]
initial
begin
	DataB_expected[26] = 1'bX;
end 
// expected DataB[ 25 ]
initial
begin
	DataB_expected[25] = 1'bX;
end 
// expected DataB[ 24 ]
initial
begin
	DataB_expected[24] = 1'bX;
end 
// expected DataB[ 23 ]
initial
begin
	DataB_expected[23] = 1'bX;
end 
// expected DataB[ 22 ]
initial
begin
	DataB_expected[22] = 1'bX;
end 
// expected DataB[ 21 ]
initial
begin
	DataB_expected[21] = 1'bX;
end 
// expected DataB[ 20 ]
initial
begin
	DataB_expected[20] = 1'bX;
end 
// expected DataB[ 19 ]
initial
begin
	DataB_expected[19] = 1'bX;
end 
// expected DataB[ 18 ]
initial
begin
	DataB_expected[18] = 1'bX;
end 
// expected DataB[ 17 ]
initial
begin
	DataB_expected[17] = 1'bX;
end 
// expected DataB[ 16 ]
initial
begin
	DataB_expected[16] = 1'bX;
end 
// expected DataB[ 15 ]
initial
begin
	DataB_expected[15] = 1'bX;
end 
// expected DataB[ 14 ]
initial
begin
	DataB_expected[14] = 1'bX;
end 
// expected DataB[ 13 ]
initial
begin
	DataB_expected[13] = 1'bX;
end 
// expected DataB[ 12 ]
initial
begin
	DataB_expected[12] = 1'bX;
end 
// expected DataB[ 11 ]
initial
begin
	DataB_expected[11] = 1'bX;
end 
// expected DataB[ 10 ]
initial
begin
	DataB_expected[10] = 1'bX;
end 
// expected DataB[ 9 ]
initial
begin
	DataB_expected[9] = 1'bX;
end 
// expected DataB[ 8 ]
initial
begin
	DataB_expected[8] = 1'bX;
end 
// expected DataB[ 7 ]
initial
begin
	DataB_expected[7] = 1'bX;
end 
// expected DataB[ 6 ]
initial
begin
	DataB_expected[6] = 1'bX;
end 
// expected DataB[ 5 ]
initial
begin
	DataB_expected[5] = 1'bX;
end 
// expected DataB[ 4 ]
initial
begin
	DataB_expected[4] = 1'bX;
end 
// expected DataB[ 3 ]
initial
begin
	DataB_expected[3] = 1'bX;
end 
// expected DataB[ 2 ]
initial
begin
	DataB_expected[2] = 1'bX;
end 
// expected DataB[ 1 ]
initial
begin
	DataB_expected[1] = 1'bX;
end 
// expected DataB[ 0 ]
initial
begin
	DataB_expected[0] = 1'bX;
end 
// generate trigger
always @(DataB_expected or DataB)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DataB = %b | ",DataB_expected_prev);
	$display("| real DataB = %b | ",DataB_prev);
`endif
	if (
		( DataB_expected_prev[0] !== 1'bx ) && ( DataB_prev[0] !== DataB_expected_prev[0] )
		&& ((DataB_expected_prev[0] !== last_DataB_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[0] = DataB_expected_prev[0];
	end
	if (
		( DataB_expected_prev[1] !== 1'bx ) && ( DataB_prev[1] !== DataB_expected_prev[1] )
		&& ((DataB_expected_prev[1] !== last_DataB_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[1] = DataB_expected_prev[1];
	end
	if (
		( DataB_expected_prev[2] !== 1'bx ) && ( DataB_prev[2] !== DataB_expected_prev[2] )
		&& ((DataB_expected_prev[2] !== last_DataB_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[2] = DataB_expected_prev[2];
	end
	if (
		( DataB_expected_prev[3] !== 1'bx ) && ( DataB_prev[3] !== DataB_expected_prev[3] )
		&& ((DataB_expected_prev[3] !== last_DataB_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[3] = DataB_expected_prev[3];
	end
	if (
		( DataB_expected_prev[4] !== 1'bx ) && ( DataB_prev[4] !== DataB_expected_prev[4] )
		&& ((DataB_expected_prev[4] !== last_DataB_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[4] = DataB_expected_prev[4];
	end
	if (
		( DataB_expected_prev[5] !== 1'bx ) && ( DataB_prev[5] !== DataB_expected_prev[5] )
		&& ((DataB_expected_prev[5] !== last_DataB_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[5] = DataB_expected_prev[5];
	end
	if (
		( DataB_expected_prev[6] !== 1'bx ) && ( DataB_prev[6] !== DataB_expected_prev[6] )
		&& ((DataB_expected_prev[6] !== last_DataB_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[6] = DataB_expected_prev[6];
	end
	if (
		( DataB_expected_prev[7] !== 1'bx ) && ( DataB_prev[7] !== DataB_expected_prev[7] )
		&& ((DataB_expected_prev[7] !== last_DataB_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[7] = DataB_expected_prev[7];
	end
	if (
		( DataB_expected_prev[8] !== 1'bx ) && ( DataB_prev[8] !== DataB_expected_prev[8] )
		&& ((DataB_expected_prev[8] !== last_DataB_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[8] = DataB_expected_prev[8];
	end
	if (
		( DataB_expected_prev[9] !== 1'bx ) && ( DataB_prev[9] !== DataB_expected_prev[9] )
		&& ((DataB_expected_prev[9] !== last_DataB_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[9] = DataB_expected_prev[9];
	end
	if (
		( DataB_expected_prev[10] !== 1'bx ) && ( DataB_prev[10] !== DataB_expected_prev[10] )
		&& ((DataB_expected_prev[10] !== last_DataB_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[10] = DataB_expected_prev[10];
	end
	if (
		( DataB_expected_prev[11] !== 1'bx ) && ( DataB_prev[11] !== DataB_expected_prev[11] )
		&& ((DataB_expected_prev[11] !== last_DataB_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[11] = DataB_expected_prev[11];
	end
	if (
		( DataB_expected_prev[12] !== 1'bx ) && ( DataB_prev[12] !== DataB_expected_prev[12] )
		&& ((DataB_expected_prev[12] !== last_DataB_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[12] = DataB_expected_prev[12];
	end
	if (
		( DataB_expected_prev[13] !== 1'bx ) && ( DataB_prev[13] !== DataB_expected_prev[13] )
		&& ((DataB_expected_prev[13] !== last_DataB_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[13] = DataB_expected_prev[13];
	end
	if (
		( DataB_expected_prev[14] !== 1'bx ) && ( DataB_prev[14] !== DataB_expected_prev[14] )
		&& ((DataB_expected_prev[14] !== last_DataB_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[14] = DataB_expected_prev[14];
	end
	if (
		( DataB_expected_prev[15] !== 1'bx ) && ( DataB_prev[15] !== DataB_expected_prev[15] )
		&& ((DataB_expected_prev[15] !== last_DataB_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[15] = DataB_expected_prev[15];
	end
	if (
		( DataB_expected_prev[16] !== 1'bx ) && ( DataB_prev[16] !== DataB_expected_prev[16] )
		&& ((DataB_expected_prev[16] !== last_DataB_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[16] = DataB_expected_prev[16];
	end
	if (
		( DataB_expected_prev[17] !== 1'bx ) && ( DataB_prev[17] !== DataB_expected_prev[17] )
		&& ((DataB_expected_prev[17] !== last_DataB_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[17] = DataB_expected_prev[17];
	end
	if (
		( DataB_expected_prev[18] !== 1'bx ) && ( DataB_prev[18] !== DataB_expected_prev[18] )
		&& ((DataB_expected_prev[18] !== last_DataB_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[18] = DataB_expected_prev[18];
	end
	if (
		( DataB_expected_prev[19] !== 1'bx ) && ( DataB_prev[19] !== DataB_expected_prev[19] )
		&& ((DataB_expected_prev[19] !== last_DataB_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[19] = DataB_expected_prev[19];
	end
	if (
		( DataB_expected_prev[20] !== 1'bx ) && ( DataB_prev[20] !== DataB_expected_prev[20] )
		&& ((DataB_expected_prev[20] !== last_DataB_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[20] = DataB_expected_prev[20];
	end
	if (
		( DataB_expected_prev[21] !== 1'bx ) && ( DataB_prev[21] !== DataB_expected_prev[21] )
		&& ((DataB_expected_prev[21] !== last_DataB_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[21] = DataB_expected_prev[21];
	end
	if (
		( DataB_expected_prev[22] !== 1'bx ) && ( DataB_prev[22] !== DataB_expected_prev[22] )
		&& ((DataB_expected_prev[22] !== last_DataB_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[22] = DataB_expected_prev[22];
	end
	if (
		( DataB_expected_prev[23] !== 1'bx ) && ( DataB_prev[23] !== DataB_expected_prev[23] )
		&& ((DataB_expected_prev[23] !== last_DataB_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[23] = DataB_expected_prev[23];
	end
	if (
		( DataB_expected_prev[24] !== 1'bx ) && ( DataB_prev[24] !== DataB_expected_prev[24] )
		&& ((DataB_expected_prev[24] !== last_DataB_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[24] = DataB_expected_prev[24];
	end
	if (
		( DataB_expected_prev[25] !== 1'bx ) && ( DataB_prev[25] !== DataB_expected_prev[25] )
		&& ((DataB_expected_prev[25] !== last_DataB_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[25] = DataB_expected_prev[25];
	end
	if (
		( DataB_expected_prev[26] !== 1'bx ) && ( DataB_prev[26] !== DataB_expected_prev[26] )
		&& ((DataB_expected_prev[26] !== last_DataB_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[26] = DataB_expected_prev[26];
	end
	if (
		( DataB_expected_prev[27] !== 1'bx ) && ( DataB_prev[27] !== DataB_expected_prev[27] )
		&& ((DataB_expected_prev[27] !== last_DataB_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[27] = DataB_expected_prev[27];
	end
	if (
		( DataB_expected_prev[28] !== 1'bx ) && ( DataB_prev[28] !== DataB_expected_prev[28] )
		&& ((DataB_expected_prev[28] !== last_DataB_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[28] = DataB_expected_prev[28];
	end
	if (
		( DataB_expected_prev[29] !== 1'bx ) && ( DataB_prev[29] !== DataB_expected_prev[29] )
		&& ((DataB_expected_prev[29] !== last_DataB_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[29] = DataB_expected_prev[29];
	end
	if (
		( DataB_expected_prev[30] !== 1'bx ) && ( DataB_prev[30] !== DataB_expected_prev[30] )
		&& ((DataB_expected_prev[30] !== last_DataB_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[30] = DataB_expected_prev[30];
	end
	if (
		( DataB_expected_prev[31] !== 1'bx ) && ( DataB_prev[31] !== DataB_expected_prev[31] )
		&& ((DataB_expected_prev[31] !== last_DataB_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataB[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataB_expected_prev);
		$display ("     Real value = %b", DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataB_exp[31] = DataB_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mux_data_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ALUSrc;
reg [31:0] Imm32;
reg [31:0] RtData;
// wires                                               
wire [31:0] DataB;

wire sampler;                             

// assign statements (if any)                          
mux_data i1 (
// port map - connection between master ports and signals/registers   
	.ALUSrc(ALUSrc),
	.DataB(DataB),
	.Imm32(Imm32),
	.RtData(RtData)
);

// ALUSrc
initial
begin
	ALUSrc = 1'b0;
	ALUSrc = #160000 1'b1;
	ALUSrc = #200000 1'b0;
end 
// RtData[ 31 ]
initial
begin
	RtData[31] = 1'b0;
end 
// RtData[ 30 ]
initial
begin
	RtData[30] = 1'b1;
	RtData[30] = #240000 1'b0;
end 
// RtData[ 29 ]
initial
begin
	RtData[29] = 1'b1;
	RtData[29] = #240000 1'b0;
end 
// RtData[ 28 ]
initial
begin
	RtData[28] = 1'b0;
end 
// RtData[ 27 ]
initial
begin
	RtData[27] = 1'b0;
end 
// RtData[ 26 ]
initial
begin
	RtData[26] = 1'b1;
	RtData[26] = #240000 1'b0;
end 
// RtData[ 25 ]
initial
begin
	RtData[25] = 1'b1;
	RtData[25] = #240000 1'b0;
end 
// RtData[ 24 ]
initial
begin
	RtData[24] = 1'b1;
	RtData[24] = #240000 1'b0;
end 
// RtData[ 23 ]
initial
begin
	RtData[23] = 1'b1;
	RtData[23] = #240000 1'b0;
end 
// RtData[ 22 ]
initial
begin
	RtData[22] = 1'b0;
end 
// RtData[ 21 ]
initial
begin
	RtData[21] = 1'b0;
end 
// RtData[ 20 ]
initial
begin
	RtData[20] = 1'b0;
end 
// RtData[ 19 ]
initial
begin
	RtData[19] = 1'b1;
	RtData[19] = #240000 1'b0;
end 
// RtData[ 18 ]
initial
begin
	RtData[18] = 1'b0;
end 
// RtData[ 17 ]
initial
begin
	RtData[17] = 1'b0;
end 
// RtData[ 16 ]
initial
begin
	RtData[16] = 1'b1;
	RtData[16] = #240000 1'b0;
end 
// RtData[ 15 ]
initial
begin
	RtData[15] = 1'b1;
	RtData[15] = #240000 1'b0;
end 
// RtData[ 14 ]
initial
begin
	RtData[14] = 1'b0;
end 
// RtData[ 13 ]
initial
begin
	RtData[13] = 1'b1;
	RtData[13] = #240000 1'b0;
end 
// RtData[ 12 ]
initial
begin
	RtData[12] = 1'b0;
end 
// RtData[ 11 ]
initial
begin
	RtData[11] = 1'b1;
	RtData[11] = #240000 1'b0;
end 
// RtData[ 10 ]
initial
begin
	RtData[10] = 1'b0;
end 
// RtData[ 9 ]
initial
begin
	RtData[9] = 1'b1;
	RtData[9] = #240000 1'b0;
end 
// RtData[ 8 ]
initial
begin
	RtData[8] = 1'b1;
	RtData[8] = #240000 1'b0;
end 
// RtData[ 7 ]
initial
begin
	RtData[7] = 1'b1;
	RtData[7] = #240000 1'b0;
end 
// RtData[ 6 ]
initial
begin
	RtData[6] = 1'b1;
	RtData[6] = #240000 1'b0;
end 
// RtData[ 5 ]
initial
begin
	RtData[5] = 1'b0;
end 
// RtData[ 4 ]
initial
begin
	RtData[4] = 1'b0;
end 
// RtData[ 3 ]
initial
begin
	RtData[3] = 1'b1;
	RtData[3] = #240000 1'b0;
end 
// RtData[ 2 ]
initial
begin
	RtData[2] = 1'b1;
	RtData[2] = #240000 1'b0;
end 
// RtData[ 1 ]
initial
begin
	RtData[1] = 1'b0;
end 
// RtData[ 0 ]
initial
begin
	RtData[0] = 1'b1;
	RtData[0] = #240000 1'b0;
end 
// Imm32[ 31 ]
initial
begin
	Imm32[31] = 1'b0;
end 
// Imm32[ 30 ]
initial
begin
	Imm32[30] = 1'b0;
end 
// Imm32[ 29 ]
initial
begin
	Imm32[29] = 1'b0;
end 
// Imm32[ 28 ]
initial
begin
	Imm32[28] = 1'b0;
	Imm32[28] = #240000 1'b1;
	Imm32[28] = #250000 1'b0;
end 
// Imm32[ 27 ]
initial
begin
	Imm32[27] = 1'b0;
end 
// Imm32[ 26 ]
initial
begin
	Imm32[26] = 1'b0;
end 
// Imm32[ 25 ]
initial
begin
	Imm32[25] = 1'b0;
	Imm32[25] = #240000 1'b1;
	Imm32[25] = #250000 1'b0;
end 
// Imm32[ 24 ]
initial
begin
	Imm32[24] = 1'b0;
end 
// Imm32[ 23 ]
initial
begin
	Imm32[23] = 1'b0;
end 
// Imm32[ 22 ]
initial
begin
	Imm32[22] = 1'b0;
end 
// Imm32[ 21 ]
initial
begin
	Imm32[21] = 1'b0;
	Imm32[21] = #240000 1'b1;
	Imm32[21] = #250000 1'b0;
end 
// Imm32[ 20 ]
initial
begin
	Imm32[20] = 1'b0;
	Imm32[20] = #240000 1'b1;
	Imm32[20] = #250000 1'b0;
end 
// Imm32[ 19 ]
initial
begin
	Imm32[19] = 1'b0;
end 
// Imm32[ 18 ]
initial
begin
	Imm32[18] = 1'b0;
	Imm32[18] = #240000 1'b1;
	Imm32[18] = #250000 1'b0;
end 
// Imm32[ 17 ]
initial
begin
	Imm32[17] = 1'b0;
end 
// Imm32[ 16 ]
initial
begin
	Imm32[16] = 1'b0;
end 
// Imm32[ 15 ]
initial
begin
	Imm32[15] = 1'b0;
end 
// Imm32[ 14 ]
initial
begin
	Imm32[14] = 1'b0;
	Imm32[14] = #240000 1'b1;
	Imm32[14] = #250000 1'b0;
end 
// Imm32[ 13 ]
initial
begin
	Imm32[13] = 1'b0;
end 
// Imm32[ 12 ]
initial
begin
	Imm32[12] = 1'b0;
	Imm32[12] = #240000 1'b1;
	Imm32[12] = #250000 1'b0;
end 
// Imm32[ 11 ]
initial
begin
	Imm32[11] = 1'b0;
end 
// Imm32[ 10 ]
initial
begin
	Imm32[10] = 1'b0;
	Imm32[10] = #240000 1'b1;
	Imm32[10] = #250000 1'b0;
end 
// Imm32[ 9 ]
initial
begin
	Imm32[9] = 1'b0;
	Imm32[9] = #240000 1'b1;
	Imm32[9] = #250000 1'b0;
end 
// Imm32[ 8 ]
initial
begin
	Imm32[8] = 1'b0;
end 
// Imm32[ 7 ]
initial
begin
	Imm32[7] = 1'b0;
end 
// Imm32[ 6 ]
initial
begin
	Imm32[6] = 1'b0;
	Imm32[6] = #240000 1'b1;
	Imm32[6] = #250000 1'b0;
end 
// Imm32[ 5 ]
initial
begin
	Imm32[5] = 1'b0;
	Imm32[5] = #240000 1'b1;
	Imm32[5] = #250000 1'b0;
end 
// Imm32[ 4 ]
initial
begin
	Imm32[4] = 1'b0;
	Imm32[4] = #240000 1'b1;
	Imm32[4] = #250000 1'b0;
end 
// Imm32[ 3 ]
initial
begin
	Imm32[3] = 1'b0;
	Imm32[3] = #240000 1'b1;
	Imm32[3] = #250000 1'b0;
end 
// Imm32[ 2 ]
initial
begin
	Imm32[2] = 1'b0;
end 
// Imm32[ 1 ]
initial
begin
	Imm32[1] = 1'b0;
end 
// Imm32[ 0 ]
initial
begin
	Imm32[0] = 1'b0;
end 

mux_data_vlg_sample_tst tb_sample (
	.ALUSrc(ALUSrc),
	.Imm32(Imm32),
	.RtData(RtData),
	.sampler_tx(sampler)
);

mux_data_vlg_check_tst tb_out(
	.DataB(DataB),
	.sampler_rx(sampler)
);
endmodule

