// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/02/2020 17:29:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mux_M2R
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_M2R_vlg_sample_tst(
	ALUOut,
	M2R,
	Mem,
	sampler_tx
);
input [31:0] ALUOut;
input  M2R;
input [31:0] Mem;
output sampler_tx;

reg sample;
time current_time;
always @(ALUOut or M2R or Mem)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mux_M2R_vlg_check_tst (
	WriteData,
	sampler_rx
);
input [31:0] WriteData;
input sampler_rx;

reg [31:0] WriteData_expected;

reg [31:0] WriteData_prev;

reg [31:0] WriteData_expected_prev;

reg [31:0] last_WriteData_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	WriteData_prev = WriteData;
end

// update expected /o prevs

always @(trigger)
begin
	WriteData_expected_prev = WriteData_expected;
end


// expected WriteData[ 31 ]
initial
begin
	WriteData_expected[31] = 1'bX;
end 
// expected WriteData[ 30 ]
initial
begin
	WriteData_expected[30] = 1'bX;
end 
// expected WriteData[ 29 ]
initial
begin
	WriteData_expected[29] = 1'bX;
end 
// expected WriteData[ 28 ]
initial
begin
	WriteData_expected[28] = 1'bX;
end 
// expected WriteData[ 27 ]
initial
begin
	WriteData_expected[27] = 1'bX;
end 
// expected WriteData[ 26 ]
initial
begin
	WriteData_expected[26] = 1'bX;
end 
// expected WriteData[ 25 ]
initial
begin
	WriteData_expected[25] = 1'bX;
end 
// expected WriteData[ 24 ]
initial
begin
	WriteData_expected[24] = 1'bX;
end 
// expected WriteData[ 23 ]
initial
begin
	WriteData_expected[23] = 1'bX;
end 
// expected WriteData[ 22 ]
initial
begin
	WriteData_expected[22] = 1'bX;
end 
// expected WriteData[ 21 ]
initial
begin
	WriteData_expected[21] = 1'bX;
end 
// expected WriteData[ 20 ]
initial
begin
	WriteData_expected[20] = 1'bX;
end 
// expected WriteData[ 19 ]
initial
begin
	WriteData_expected[19] = 1'bX;
end 
// expected WriteData[ 18 ]
initial
begin
	WriteData_expected[18] = 1'bX;
end 
// expected WriteData[ 17 ]
initial
begin
	WriteData_expected[17] = 1'bX;
end 
// expected WriteData[ 16 ]
initial
begin
	WriteData_expected[16] = 1'bX;
end 
// expected WriteData[ 15 ]
initial
begin
	WriteData_expected[15] = 1'bX;
end 
// expected WriteData[ 14 ]
initial
begin
	WriteData_expected[14] = 1'bX;
end 
// expected WriteData[ 13 ]
initial
begin
	WriteData_expected[13] = 1'bX;
end 
// expected WriteData[ 12 ]
initial
begin
	WriteData_expected[12] = 1'bX;
end 
// expected WriteData[ 11 ]
initial
begin
	WriteData_expected[11] = 1'bX;
end 
// expected WriteData[ 10 ]
initial
begin
	WriteData_expected[10] = 1'bX;
end 
// expected WriteData[ 9 ]
initial
begin
	WriteData_expected[9] = 1'bX;
end 
// expected WriteData[ 8 ]
initial
begin
	WriteData_expected[8] = 1'bX;
end 
// expected WriteData[ 7 ]
initial
begin
	WriteData_expected[7] = 1'bX;
end 
// expected WriteData[ 6 ]
initial
begin
	WriteData_expected[6] = 1'bX;
end 
// expected WriteData[ 5 ]
initial
begin
	WriteData_expected[5] = 1'bX;
end 
// expected WriteData[ 4 ]
initial
begin
	WriteData_expected[4] = 1'bX;
end 
// expected WriteData[ 3 ]
initial
begin
	WriteData_expected[3] = 1'bX;
end 
// expected WriteData[ 2 ]
initial
begin
	WriteData_expected[2] = 1'bX;
end 
// expected WriteData[ 1 ]
initial
begin
	WriteData_expected[1] = 1'bX;
end 
// expected WriteData[ 0 ]
initial
begin
	WriteData_expected[0] = 1'bX;
end 
// generate trigger
always @(WriteData_expected or WriteData)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected WriteData = %b | ",WriteData_expected_prev);
	$display("| real WriteData = %b | ",WriteData_prev);
`endif
	if (
		( WriteData_expected_prev[0] !== 1'bx ) && ( WriteData_prev[0] !== WriteData_expected_prev[0] )
		&& ((WriteData_expected_prev[0] !== last_WriteData_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[0] = WriteData_expected_prev[0];
	end
	if (
		( WriteData_expected_prev[1] !== 1'bx ) && ( WriteData_prev[1] !== WriteData_expected_prev[1] )
		&& ((WriteData_expected_prev[1] !== last_WriteData_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[1] = WriteData_expected_prev[1];
	end
	if (
		( WriteData_expected_prev[2] !== 1'bx ) && ( WriteData_prev[2] !== WriteData_expected_prev[2] )
		&& ((WriteData_expected_prev[2] !== last_WriteData_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[2] = WriteData_expected_prev[2];
	end
	if (
		( WriteData_expected_prev[3] !== 1'bx ) && ( WriteData_prev[3] !== WriteData_expected_prev[3] )
		&& ((WriteData_expected_prev[3] !== last_WriteData_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[3] = WriteData_expected_prev[3];
	end
	if (
		( WriteData_expected_prev[4] !== 1'bx ) && ( WriteData_prev[4] !== WriteData_expected_prev[4] )
		&& ((WriteData_expected_prev[4] !== last_WriteData_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[4] = WriteData_expected_prev[4];
	end
	if (
		( WriteData_expected_prev[5] !== 1'bx ) && ( WriteData_prev[5] !== WriteData_expected_prev[5] )
		&& ((WriteData_expected_prev[5] !== last_WriteData_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[5] = WriteData_expected_prev[5];
	end
	if (
		( WriteData_expected_prev[6] !== 1'bx ) && ( WriteData_prev[6] !== WriteData_expected_prev[6] )
		&& ((WriteData_expected_prev[6] !== last_WriteData_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[6] = WriteData_expected_prev[6];
	end
	if (
		( WriteData_expected_prev[7] !== 1'bx ) && ( WriteData_prev[7] !== WriteData_expected_prev[7] )
		&& ((WriteData_expected_prev[7] !== last_WriteData_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[7] = WriteData_expected_prev[7];
	end
	if (
		( WriteData_expected_prev[8] !== 1'bx ) && ( WriteData_prev[8] !== WriteData_expected_prev[8] )
		&& ((WriteData_expected_prev[8] !== last_WriteData_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[8] = WriteData_expected_prev[8];
	end
	if (
		( WriteData_expected_prev[9] !== 1'bx ) && ( WriteData_prev[9] !== WriteData_expected_prev[9] )
		&& ((WriteData_expected_prev[9] !== last_WriteData_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[9] = WriteData_expected_prev[9];
	end
	if (
		( WriteData_expected_prev[10] !== 1'bx ) && ( WriteData_prev[10] !== WriteData_expected_prev[10] )
		&& ((WriteData_expected_prev[10] !== last_WriteData_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[10] = WriteData_expected_prev[10];
	end
	if (
		( WriteData_expected_prev[11] !== 1'bx ) && ( WriteData_prev[11] !== WriteData_expected_prev[11] )
		&& ((WriteData_expected_prev[11] !== last_WriteData_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[11] = WriteData_expected_prev[11];
	end
	if (
		( WriteData_expected_prev[12] !== 1'bx ) && ( WriteData_prev[12] !== WriteData_expected_prev[12] )
		&& ((WriteData_expected_prev[12] !== last_WriteData_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[12] = WriteData_expected_prev[12];
	end
	if (
		( WriteData_expected_prev[13] !== 1'bx ) && ( WriteData_prev[13] !== WriteData_expected_prev[13] )
		&& ((WriteData_expected_prev[13] !== last_WriteData_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[13] = WriteData_expected_prev[13];
	end
	if (
		( WriteData_expected_prev[14] !== 1'bx ) && ( WriteData_prev[14] !== WriteData_expected_prev[14] )
		&& ((WriteData_expected_prev[14] !== last_WriteData_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[14] = WriteData_expected_prev[14];
	end
	if (
		( WriteData_expected_prev[15] !== 1'bx ) && ( WriteData_prev[15] !== WriteData_expected_prev[15] )
		&& ((WriteData_expected_prev[15] !== last_WriteData_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[15] = WriteData_expected_prev[15];
	end
	if (
		( WriteData_expected_prev[16] !== 1'bx ) && ( WriteData_prev[16] !== WriteData_expected_prev[16] )
		&& ((WriteData_expected_prev[16] !== last_WriteData_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[16] = WriteData_expected_prev[16];
	end
	if (
		( WriteData_expected_prev[17] !== 1'bx ) && ( WriteData_prev[17] !== WriteData_expected_prev[17] )
		&& ((WriteData_expected_prev[17] !== last_WriteData_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[17] = WriteData_expected_prev[17];
	end
	if (
		( WriteData_expected_prev[18] !== 1'bx ) && ( WriteData_prev[18] !== WriteData_expected_prev[18] )
		&& ((WriteData_expected_prev[18] !== last_WriteData_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[18] = WriteData_expected_prev[18];
	end
	if (
		( WriteData_expected_prev[19] !== 1'bx ) && ( WriteData_prev[19] !== WriteData_expected_prev[19] )
		&& ((WriteData_expected_prev[19] !== last_WriteData_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[19] = WriteData_expected_prev[19];
	end
	if (
		( WriteData_expected_prev[20] !== 1'bx ) && ( WriteData_prev[20] !== WriteData_expected_prev[20] )
		&& ((WriteData_expected_prev[20] !== last_WriteData_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[20] = WriteData_expected_prev[20];
	end
	if (
		( WriteData_expected_prev[21] !== 1'bx ) && ( WriteData_prev[21] !== WriteData_expected_prev[21] )
		&& ((WriteData_expected_prev[21] !== last_WriteData_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[21] = WriteData_expected_prev[21];
	end
	if (
		( WriteData_expected_prev[22] !== 1'bx ) && ( WriteData_prev[22] !== WriteData_expected_prev[22] )
		&& ((WriteData_expected_prev[22] !== last_WriteData_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[22] = WriteData_expected_prev[22];
	end
	if (
		( WriteData_expected_prev[23] !== 1'bx ) && ( WriteData_prev[23] !== WriteData_expected_prev[23] )
		&& ((WriteData_expected_prev[23] !== last_WriteData_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[23] = WriteData_expected_prev[23];
	end
	if (
		( WriteData_expected_prev[24] !== 1'bx ) && ( WriteData_prev[24] !== WriteData_expected_prev[24] )
		&& ((WriteData_expected_prev[24] !== last_WriteData_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[24] = WriteData_expected_prev[24];
	end
	if (
		( WriteData_expected_prev[25] !== 1'bx ) && ( WriteData_prev[25] !== WriteData_expected_prev[25] )
		&& ((WriteData_expected_prev[25] !== last_WriteData_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[25] = WriteData_expected_prev[25];
	end
	if (
		( WriteData_expected_prev[26] !== 1'bx ) && ( WriteData_prev[26] !== WriteData_expected_prev[26] )
		&& ((WriteData_expected_prev[26] !== last_WriteData_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[26] = WriteData_expected_prev[26];
	end
	if (
		( WriteData_expected_prev[27] !== 1'bx ) && ( WriteData_prev[27] !== WriteData_expected_prev[27] )
		&& ((WriteData_expected_prev[27] !== last_WriteData_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[27] = WriteData_expected_prev[27];
	end
	if (
		( WriteData_expected_prev[28] !== 1'bx ) && ( WriteData_prev[28] !== WriteData_expected_prev[28] )
		&& ((WriteData_expected_prev[28] !== last_WriteData_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[28] = WriteData_expected_prev[28];
	end
	if (
		( WriteData_expected_prev[29] !== 1'bx ) && ( WriteData_prev[29] !== WriteData_expected_prev[29] )
		&& ((WriteData_expected_prev[29] !== last_WriteData_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[29] = WriteData_expected_prev[29];
	end
	if (
		( WriteData_expected_prev[30] !== 1'bx ) && ( WriteData_prev[30] !== WriteData_expected_prev[30] )
		&& ((WriteData_expected_prev[30] !== last_WriteData_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[30] = WriteData_expected_prev[30];
	end
	if (
		( WriteData_expected_prev[31] !== 1'bx ) && ( WriteData_prev[31] !== WriteData_expected_prev[31] )
		&& ((WriteData_expected_prev[31] !== last_WriteData_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteData_exp[31] = WriteData_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mux_M2R_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] ALUOut;
reg M2R;
reg [31:0] Mem;
// wires                                               
wire [31:0] WriteData;

wire sampler;                             

// assign statements (if any)                          
mux_M2R i1 (
// port map - connection between master ports and signals/registers   
	.ALUOut(ALUOut),
	.M2R(M2R),
	.Mem(Mem),
	.WriteData(WriteData)
);

// M2R
initial
begin
	M2R = 1'b0;
	M2R = #180000 1'b1;
	M2R = #230000 1'b0;
end 
// ALUOut[ 31 ]
initial
begin
	ALUOut[31] = 1'b0;
end 
// ALUOut[ 30 ]
initial
begin
	ALUOut[30] = 1'b0;
end 
// ALUOut[ 29 ]
initial
begin
	ALUOut[29] = 1'b0;
end 
// ALUOut[ 28 ]
initial
begin
	ALUOut[28] = 1'b1;
	ALUOut[28] = #310000 1'b0;
end 
// ALUOut[ 27 ]
initial
begin
	ALUOut[27] = 1'b0;
end 
// ALUOut[ 26 ]
initial
begin
	ALUOut[26] = 1'b0;
end 
// ALUOut[ 25 ]
initial
begin
	ALUOut[25] = 1'b1;
	ALUOut[25] = #310000 1'b0;
end 
// ALUOut[ 24 ]
initial
begin
	ALUOut[24] = 1'b0;
end 
// ALUOut[ 23 ]
initial
begin
	ALUOut[23] = 1'b0;
end 
// ALUOut[ 22 ]
initial
begin
	ALUOut[22] = 1'b0;
end 
// ALUOut[ 21 ]
initial
begin
	ALUOut[21] = 1'b1;
	ALUOut[21] = #310000 1'b0;
end 
// ALUOut[ 20 ]
initial
begin
	ALUOut[20] = 1'b1;
	ALUOut[20] = #310000 1'b0;
end 
// ALUOut[ 19 ]
initial
begin
	ALUOut[19] = 1'b0;
end 
// ALUOut[ 18 ]
initial
begin
	ALUOut[18] = 1'b1;
	ALUOut[18] = #310000 1'b0;
end 
// ALUOut[ 17 ]
initial
begin
	ALUOut[17] = 1'b0;
end 
// ALUOut[ 16 ]
initial
begin
	ALUOut[16] = 1'b0;
end 
// ALUOut[ 15 ]
initial
begin
	ALUOut[15] = 1'b0;
end 
// ALUOut[ 14 ]
initial
begin
	ALUOut[14] = 1'b1;
	ALUOut[14] = #310000 1'b0;
end 
// ALUOut[ 13 ]
initial
begin
	ALUOut[13] = 1'b0;
end 
// ALUOut[ 12 ]
initial
begin
	ALUOut[12] = 1'b1;
	ALUOut[12] = #310000 1'b0;
end 
// ALUOut[ 11 ]
initial
begin
	ALUOut[11] = 1'b0;
end 
// ALUOut[ 10 ]
initial
begin
	ALUOut[10] = 1'b1;
	ALUOut[10] = #310000 1'b0;
end 
// ALUOut[ 9 ]
initial
begin
	ALUOut[9] = 1'b1;
	ALUOut[9] = #310000 1'b0;
end 
// ALUOut[ 8 ]
initial
begin
	ALUOut[8] = 1'b0;
end 
// ALUOut[ 7 ]
initial
begin
	ALUOut[7] = 1'b0;
end 
// ALUOut[ 6 ]
initial
begin
	ALUOut[6] = 1'b1;
	ALUOut[6] = #310000 1'b0;
end 
// ALUOut[ 5 ]
initial
begin
	ALUOut[5] = 1'b1;
	ALUOut[5] = #310000 1'b0;
end 
// ALUOut[ 4 ]
initial
begin
	ALUOut[4] = 1'b1;
	ALUOut[4] = #310000 1'b0;
end 
// ALUOut[ 3 ]
initial
begin
	ALUOut[3] = 1'b1;
	ALUOut[3] = #310000 1'b0;
end 
// ALUOut[ 2 ]
initial
begin
	ALUOut[2] = 1'b0;
end 
// ALUOut[ 1 ]
initial
begin
	ALUOut[1] = 1'b0;
end 
// ALUOut[ 0 ]
initial
begin
	ALUOut[0] = 1'b0;
end 
// Mem[ 31 ]
initial
begin
	Mem[31] = 1'b0;
end 
// Mem[ 30 ]
initial
begin
	Mem[30] = 1'b0;
end 
// Mem[ 29 ]
initial
begin
	Mem[29] = 1'b0;
	Mem[29] = #310000 1'b1;
	Mem[29] = #320000 1'b0;
end 
// Mem[ 28 ]
initial
begin
	Mem[28] = 1'b0;
	Mem[28] = #310000 1'b1;
	Mem[28] = #320000 1'b0;
end 
// Mem[ 27 ]
initial
begin
	Mem[27] = 1'b0;
end 
// Mem[ 26 ]
initial
begin
	Mem[26] = 1'b0;
	Mem[26] = #310000 1'b1;
	Mem[26] = #320000 1'b0;
end 
// Mem[ 25 ]
initial
begin
	Mem[25] = 1'b0;
end 
// Mem[ 24 ]
initial
begin
	Mem[24] = 1'b0;
end 
// Mem[ 23 ]
initial
begin
	Mem[23] = 1'b0;
end 
// Mem[ 22 ]
initial
begin
	Mem[22] = 1'b0;
	Mem[22] = #310000 1'b1;
	Mem[22] = #320000 1'b0;
end 
// Mem[ 21 ]
initial
begin
	Mem[21] = 1'b0;
end 
// Mem[ 20 ]
initial
begin
	Mem[20] = 1'b0;
	Mem[20] = #310000 1'b1;
	Mem[20] = #320000 1'b0;
end 
// Mem[ 19 ]
initial
begin
	Mem[19] = 1'b0;
end 
// Mem[ 18 ]
initial
begin
	Mem[18] = 1'b0;
	Mem[18] = #310000 1'b1;
	Mem[18] = #320000 1'b0;
end 
// Mem[ 17 ]
initial
begin
	Mem[17] = 1'b0;
	Mem[17] = #310000 1'b1;
	Mem[17] = #320000 1'b0;
end 
// Mem[ 16 ]
initial
begin
	Mem[16] = 1'b0;
end 
// Mem[ 15 ]
initial
begin
	Mem[15] = 1'b0;
end 
// Mem[ 14 ]
initial
begin
	Mem[14] = 1'b0;
	Mem[14] = #310000 1'b1;
	Mem[14] = #320000 1'b0;
end 
// Mem[ 13 ]
initial
begin
	Mem[13] = 1'b0;
	Mem[13] = #310000 1'b1;
	Mem[13] = #320000 1'b0;
end 
// Mem[ 12 ]
initial
begin
	Mem[12] = 1'b0;
	Mem[12] = #310000 1'b1;
	Mem[12] = #320000 1'b0;
end 
// Mem[ 11 ]
initial
begin
	Mem[11] = 1'b0;
	Mem[11] = #310000 1'b1;
	Mem[11] = #320000 1'b0;
end 
// Mem[ 10 ]
initial
begin
	Mem[10] = 1'b0;
end 
// Mem[ 9 ]
initial
begin
	Mem[9] = 1'b0;
end 
// Mem[ 8 ]
initial
begin
	Mem[8] = 1'b0;
end 
// Mem[ 7 ]
initial
begin
	Mem[7] = 1'b0;
	Mem[7] = #310000 1'b1;
	Mem[7] = #320000 1'b0;
end 
// Mem[ 6 ]
initial
begin
	Mem[6] = 1'b0;
end 
// Mem[ 5 ]
initial
begin
	Mem[5] = 1'b0;
end 
// Mem[ 4 ]
initial
begin
	Mem[4] = 1'b0;
	Mem[4] = #310000 1'b1;
	Mem[4] = #320000 1'b0;
end 
// Mem[ 3 ]
initial
begin
	Mem[3] = 1'b0;
end 
// Mem[ 2 ]
initial
begin
	Mem[2] = 1'b0;
end 
// Mem[ 1 ]
initial
begin
	Mem[1] = 1'b0;
end 
// Mem[ 0 ]
initial
begin
	Mem[0] = 1'b0;
end 

mux_M2R_vlg_sample_tst tb_sample (
	.ALUOut(ALUOut),
	.M2R(M2R),
	.Mem(Mem),
	.sampler_tx(sampler)
);

mux_M2R_vlg_check_tst tb_out(
	.WriteData(WriteData),
	.sampler_rx(sampler)
);
endmodule

