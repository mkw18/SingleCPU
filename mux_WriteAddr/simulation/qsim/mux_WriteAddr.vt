// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/02/2020 17:19:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mux_WriteAddr
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_WriteAddr_vlg_sample_tst(
	RdAddr,
	RegDst,
	RtAddr,
	sampler_tx
);
input [4:0] RdAddr;
input  RegDst;
input [4:0] RtAddr;
output sampler_tx;

reg sample;
time current_time;
always @(RdAddr or RegDst or RtAddr)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mux_WriteAddr_vlg_check_tst (
	WriteAddr,
	sampler_rx
);
input [4:0] WriteAddr;
input sampler_rx;

reg [4:0] WriteAddr_expected;

reg [4:0] WriteAddr_prev;

reg [4:0] WriteAddr_expected_prev;

reg [4:0] last_WriteAddr_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	WriteAddr_prev = WriteAddr;
end

// update expected /o prevs

always @(trigger)
begin
	WriteAddr_expected_prev = WriteAddr_expected;
end


// expected WriteAddr[ 4 ]
initial
begin
	WriteAddr_expected[4] = 1'bX;
end 
// expected WriteAddr[ 3 ]
initial
begin
	WriteAddr_expected[3] = 1'bX;
end 
// expected WriteAddr[ 2 ]
initial
begin
	WriteAddr_expected[2] = 1'bX;
end 
// expected WriteAddr[ 1 ]
initial
begin
	WriteAddr_expected[1] = 1'bX;
end 
// expected WriteAddr[ 0 ]
initial
begin
	WriteAddr_expected[0] = 1'bX;
end 
// generate trigger
always @(WriteAddr_expected or WriteAddr)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected WriteAddr = %b | ",WriteAddr_expected_prev);
	$display("| real WriteAddr = %b | ",WriteAddr_prev);
`endif
	if (
		( WriteAddr_expected_prev[0] !== 1'bx ) && ( WriteAddr_prev[0] !== WriteAddr_expected_prev[0] )
		&& ((WriteAddr_expected_prev[0] !== last_WriteAddr_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteAddr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteAddr_expected_prev);
		$display ("     Real value = %b", WriteAddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteAddr_exp[0] = WriteAddr_expected_prev[0];
	end
	if (
		( WriteAddr_expected_prev[1] !== 1'bx ) && ( WriteAddr_prev[1] !== WriteAddr_expected_prev[1] )
		&& ((WriteAddr_expected_prev[1] !== last_WriteAddr_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteAddr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteAddr_expected_prev);
		$display ("     Real value = %b", WriteAddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteAddr_exp[1] = WriteAddr_expected_prev[1];
	end
	if (
		( WriteAddr_expected_prev[2] !== 1'bx ) && ( WriteAddr_prev[2] !== WriteAddr_expected_prev[2] )
		&& ((WriteAddr_expected_prev[2] !== last_WriteAddr_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteAddr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteAddr_expected_prev);
		$display ("     Real value = %b", WriteAddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteAddr_exp[2] = WriteAddr_expected_prev[2];
	end
	if (
		( WriteAddr_expected_prev[3] !== 1'bx ) && ( WriteAddr_prev[3] !== WriteAddr_expected_prev[3] )
		&& ((WriteAddr_expected_prev[3] !== last_WriteAddr_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteAddr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteAddr_expected_prev);
		$display ("     Real value = %b", WriteAddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteAddr_exp[3] = WriteAddr_expected_prev[3];
	end
	if (
		( WriteAddr_expected_prev[4] !== 1'bx ) && ( WriteAddr_prev[4] !== WriteAddr_expected_prev[4] )
		&& ((WriteAddr_expected_prev[4] !== last_WriteAddr_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteAddr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteAddr_expected_prev);
		$display ("     Real value = %b", WriteAddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_WriteAddr_exp[4] = WriteAddr_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mux_WriteAddr_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] RdAddr;
reg RegDst;
reg [4:0] RtAddr;
// wires                                               
wire [4:0] WriteAddr;

wire sampler;                             

// assign statements (if any)                          
mux_WriteAddr i1 (
// port map - connection between master ports and signals/registers   
	.RdAddr(RdAddr),
	.RegDst(RegDst),
	.RtAddr(RtAddr),
	.WriteAddr(WriteAddr)
);

// RegDst
initial
begin
	RegDst = 1'b0;
	RegDst = #190000 1'b1;
	RegDst = #220000 1'b0;
end 
// RtAddr[ 4 ]
initial
begin
	RtAddr[4] = 1'b1;
	RtAddr[4] = #290000 1'b0;
end 
// RtAddr[ 3 ]
initial
begin
	RtAddr[3] = 1'b1;
	RtAddr[3] = #290000 1'b0;
	RtAddr[3] = #360000 1'b1;
	RtAddr[3] = #340000 1'b0;
end 
// RtAddr[ 2 ]
initial
begin
	RtAddr[2] = 1'b1;
	RtAddr[2] = #290000 1'b0;
end 
// RtAddr[ 1 ]
initial
begin
	RtAddr[1] = 1'b0;
end 
// RtAddr[ 0 ]
initial
begin
	RtAddr[0] = 1'b0;
	RtAddr[0] = #650000 1'b1;
	RtAddr[0] = #340000 1'b0;
end 
// RdAddr[ 4 ]
initial
begin
	RdAddr[4] = 1'b0;
end 
// RdAddr[ 3 ]
initial
begin
	RdAddr[3] = 1'b0;
end 
// RdAddr[ 2 ]
initial
begin
	RdAddr[2] = 1'b0;
	RdAddr[2] = #290000 1'b1;
	RdAddr[2] = #360000 1'b0;
end 
// RdAddr[ 1 ]
initial
begin
	RdAddr[1] = 1'b0;
	RdAddr[1] = #290000 1'b1;
	RdAddr[1] = #360000 1'b0;
end 
// RdAddr[ 0 ]
initial
begin
	RdAddr[0] = 1'b0;
	RdAddr[0] = #290000 1'b1;
	RdAddr[0] = #360000 1'b0;
end 

mux_WriteAddr_vlg_sample_tst tb_sample (
	.RdAddr(RdAddr),
	.RegDst(RegDst),
	.RtAddr(RtAddr),
	.sampler_tx(sampler)
);

mux_WriteAddr_vlg_check_tst tb_out(
	.WriteAddr(WriteAddr),
	.sampler_rx(sampler)
);
endmodule

