// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/04/2020 17:55:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mainCtl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mainCtl_vlg_sample_tst(
	opcode,
	sampler_tx
);
input [5:0] opcode;
output sampler_tx;

reg sample;
time current_time;
always @(opcode)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mainCtl_vlg_check_tst (
	ALUSrc,
	ALUop,
	Branch,
	M2R,
	MemRead,
	MemWrite,
	RegDst,
	RegWrite,
	jump,
	sampler_rx
);
input  ALUSrc;
input [1:0] ALUop;
input  Branch;
input  M2R;
input  MemRead;
input  MemWrite;
input  RegDst;
input  RegWrite;
input  jump;
input sampler_rx;

reg  ALUSrc_expected;
reg [1:0] ALUop_expected;
reg  Branch_expected;
reg  M2R_expected;
reg  MemRead_expected;
reg  MemWrite_expected;
reg  RegDst_expected;
reg  RegWrite_expected;
reg  jump_expected;

reg  ALUSrc_prev;
reg [1:0] ALUop_prev;
reg  Branch_prev;
reg  M2R_prev;
reg  MemRead_prev;
reg  MemWrite_prev;
reg  RegDst_prev;
reg  RegWrite_prev;
reg  jump_prev;

reg  ALUSrc_expected_prev;
reg [1:0] ALUop_expected_prev;
reg  Branch_expected_prev;
reg  M2R_expected_prev;
reg  MemRead_expected_prev;
reg  MemWrite_expected_prev;
reg  RegDst_expected_prev;
reg  RegWrite_expected_prev;
reg  jump_expected_prev;

reg  last_ALUSrc_exp;
reg [1:0] last_ALUop_exp;
reg  last_Branch_exp;
reg  last_M2R_exp;
reg  last_MemRead_exp;
reg  last_MemWrite_exp;
reg  last_RegDst_exp;
reg  last_RegWrite_exp;
reg  last_jump_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUSrc_prev = ALUSrc;
	ALUop_prev = ALUop;
	Branch_prev = Branch;
	M2R_prev = M2R;
	MemRead_prev = MemRead;
	MemWrite_prev = MemWrite;
	RegDst_prev = RegDst;
	RegWrite_prev = RegWrite;
	jump_prev = jump;
end

// update expected /o prevs

always @(trigger)
begin
	ALUSrc_expected_prev = ALUSrc_expected;
	ALUop_expected_prev = ALUop_expected;
	Branch_expected_prev = Branch_expected;
	M2R_expected_prev = M2R_expected;
	MemRead_expected_prev = MemRead_expected;
	MemWrite_expected_prev = MemWrite_expected;
	RegDst_expected_prev = RegDst_expected;
	RegWrite_expected_prev = RegWrite_expected;
	jump_expected_prev = jump_expected;
end



// expected ALUSrc
initial
begin
	ALUSrc_expected = 1'bX;
end 
// expected ALUop[ 1 ]
initial
begin
	ALUop_expected[1] = 1'bX;
end 
// expected ALUop[ 0 ]
initial
begin
	ALUop_expected[0] = 1'bX;
end 

// expected Branch
initial
begin
	Branch_expected = 1'bX;
end 

// expected M2R
initial
begin
	M2R_expected = 1'bX;
end 

// expected MemRead
initial
begin
	MemRead_expected = 1'bX;
end 

// expected MemWrite
initial
begin
	MemWrite_expected = 1'bX;
end 

// expected RegDst
initial
begin
	RegDst_expected = 1'bX;
end 

// expected RegWrite
initial
begin
	RegWrite_expected = 1'bX;
end 

// expected jump
initial
begin
	jump_expected = 1'bX;
end 
// generate trigger
always @(ALUSrc_expected or ALUSrc or ALUop_expected or ALUop or Branch_expected or Branch or M2R_expected or M2R or MemRead_expected or MemRead or MemWrite_expected or MemWrite or RegDst_expected or RegDst or RegWrite_expected or RegWrite or jump_expected or jump)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUSrc = %b | expected ALUop = %b | expected Branch = %b | expected M2R = %b | expected MemRead = %b | expected MemWrite = %b | expected RegDst = %b | expected RegWrite = %b | expected jump = %b | ",ALUSrc_expected_prev,ALUop_expected_prev,Branch_expected_prev,M2R_expected_prev,MemRead_expected_prev,MemWrite_expected_prev,RegDst_expected_prev,RegWrite_expected_prev,jump_expected_prev);
	$display("| real ALUSrc = %b | real ALUop = %b | real Branch = %b | real M2R = %b | real MemRead = %b | real MemWrite = %b | real RegDst = %b | real RegWrite = %b | real jump = %b | ",ALUSrc_prev,ALUop_prev,Branch_prev,M2R_prev,MemRead_prev,MemWrite_prev,RegDst_prev,RegWrite_prev,jump_prev);
`endif
	if (
		( ALUSrc_expected_prev !== 1'bx ) && ( ALUSrc_prev !== ALUSrc_expected_prev )
		&& ((ALUSrc_expected_prev !== last_ALUSrc_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_expected_prev);
		$display ("     Real value = %b", ALUSrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUSrc_exp = ALUSrc_expected_prev;
	end
	if (
		( ALUop_expected_prev[0] !== 1'bx ) && ( ALUop_prev[0] !== ALUop_expected_prev[0] )
		&& ((ALUop_expected_prev[0] !== last_ALUop_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUop[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUop_expected_prev);
		$display ("     Real value = %b", ALUop_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUop_exp[0] = ALUop_expected_prev[0];
	end
	if (
		( ALUop_expected_prev[1] !== 1'bx ) && ( ALUop_prev[1] !== ALUop_expected_prev[1] )
		&& ((ALUop_expected_prev[1] !== last_ALUop_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUop[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUop_expected_prev);
		$display ("     Real value = %b", ALUop_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUop_exp[1] = ALUop_expected_prev[1];
	end
	if (
		( Branch_expected_prev !== 1'bx ) && ( Branch_prev !== Branch_expected_prev )
		&& ((Branch_expected_prev !== last_Branch_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Branch :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Branch_expected_prev);
		$display ("     Real value = %b", Branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Branch_exp = Branch_expected_prev;
	end
	if (
		( M2R_expected_prev !== 1'bx ) && ( M2R_prev !== M2R_expected_prev )
		&& ((M2R_expected_prev !== last_M2R_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M2R :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M2R_expected_prev);
		$display ("     Real value = %b", M2R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_M2R_exp = M2R_expected_prev;
	end
	if (
		( MemRead_expected_prev !== 1'bx ) && ( MemRead_prev !== MemRead_expected_prev )
		&& ((MemRead_expected_prev !== last_MemRead_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemRead :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemRead_expected_prev);
		$display ("     Real value = %b", MemRead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MemRead_exp = MemRead_expected_prev;
	end
	if (
		( MemWrite_expected_prev !== 1'bx ) && ( MemWrite_prev !== MemWrite_expected_prev )
		&& ((MemWrite_expected_prev !== last_MemWrite_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemWrite_expected_prev);
		$display ("     Real value = %b", MemWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MemWrite_exp = MemWrite_expected_prev;
	end
	if (
		( RegDst_expected_prev !== 1'bx ) && ( RegDst_prev !== RegDst_expected_prev )
		&& ((RegDst_expected_prev !== last_RegDst_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDst :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDst_expected_prev);
		$display ("     Real value = %b", RegDst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RegDst_exp = RegDst_expected_prev;
	end
	if (
		( RegWrite_expected_prev !== 1'bx ) && ( RegWrite_prev !== RegWrite_expected_prev )
		&& ((RegWrite_expected_prev !== last_RegWrite_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegWrite_expected_prev);
		$display ("     Real value = %b", RegWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegWrite_exp = RegWrite_expected_prev;
	end
	if (
		( jump_expected_prev !== 1'bx ) && ( jump_prev !== jump_expected_prev )
		&& ((jump_expected_prev !== last_jump_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_jump_exp = jump_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mainCtl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] opcode;
// wires                                               
wire ALUSrc;
wire [1:0] ALUop;
wire Branch;
wire M2R;
wire MemRead;
wire MemWrite;
wire RegDst;
wire RegWrite;
wire jump;

wire sampler;                             

// assign statements (if any)                          
mainCtl i1 (
// port map - connection between master ports and signals/registers   
	.ALUSrc(ALUSrc),
	.ALUop(ALUop),
	.Branch(Branch),
	.M2R(M2R),
	.MemRead(MemRead),
	.MemWrite(MemWrite),
	.RegDst(RegDst),
	.RegWrite(RegWrite),
	.jump(jump),
	.opcode(opcode)
);
// opcode[ 5 ]
initial
begin
	opcode[5] = 1'b0;
	opcode[5] = #450000 1'b1;
	opcode[5] = #170000 1'b0;
end 
// opcode[ 4 ]
initial
begin
	opcode[4] = 1'b0;
	opcode[4] = #340000 1'b1;
	opcode[4] = #110000 1'b0;
end 
// opcode[ 3 ]
initial
begin
	opcode[3] = 1'b0;
	opcode[3] = #340000 1'b1;
	opcode[3] = #110000 1'b0;
end 
// opcode[ 2 ]
initial
begin
	opcode[2] = 1'b0;
	opcode[2] = #210000 1'b1;
	opcode[2] = #240000 1'b0;
end 
// opcode[ 1 ]
initial
begin
	opcode[1] = 1'b0;
	opcode[1] = #110000 1'b1;
	opcode[1] = #100000 1'b0;
	opcode[1] = #240000 1'b1;
	opcode[1] = #170000 1'b0;
end 
// opcode[ 0 ]
initial
begin
	opcode[0] = 1'b0;
	opcode[0] = #340000 1'b1;
	opcode[0] = #280000 1'b0;
end 

mainCtl_vlg_sample_tst tb_sample (
	.opcode(opcode),
	.sampler_tx(sampler)
);

mainCtl_vlg_check_tst tb_out(
	.ALUSrc(ALUSrc),
	.ALUop(ALUop),
	.Branch(Branch),
	.M2R(M2R),
	.MemRead(MemRead),
	.MemWrite(MemWrite),
	.RegDst(RegDst),
	.RegWrite(RegWrite),
	.jump(jump),
	.sampler_rx(sampler)
);
endmodule

